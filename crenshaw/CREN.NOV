November 1995crenshawlisting 2Stream I/O.// convert FP format to C floatdouble FP_to_float(const FP & x){  // donÕt try to convert a zero  if(x.e == 0)  return 0.0;  //make local copies  double mant = (double)x.m/65536.0;  short sign = x.e & 0x80;  short exp =  x.e & 0x7f;  // increase the mant for + exp  while(exp > 0x40){  mant *= 2;  Ñexp;  }  // decrease the mant for - exp  while(exp < 0x40){  mant /= 2;  ++exp;  }  // restore the sign bit  if(sign)  mant = -mant;  return mant;}                           // convert C float to FP formatFP float_to_FP(double x){  // donÕt try to convert zero       if(x == 0)  return zero;  // strip off sign bit  short sign = (x < 0);  x = abs(x);  // create local exponent  short exp = 0x40; // increase exp for large #swhile(x > 0.999984741){  x /= 2;  ++exp;  }  // decrease exp for small #s  while(x < 0.5){  x *= 2;  Ñexp;  }// donÕt let exp get out of range  if(exp > 0x7f)  return big_FP;  if(exp < 0)  return zero;  // create return value  FP retval((UBYTE)exp, x * 65536.0);  // restore sign  if(sign)  retval.e ^= 0x80;  return retval;}	                 istream & operator >> (istream & is, FP & x){  double temp;  is >> temp;  x = float_to_FP(temp);  return is;}ostream & operator << (ostream & os, FP & x){  cout << FP_to_float(x) << Ô Ô;  return os;}